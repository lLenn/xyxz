//Deprecated: use FunctionalTest/Widget
const webdriver = require("selenium-webdriver");
const { By, until } = webdriver;
const { expect } = require("chai");


class WidgetFunctionalTestObject {
	constructor(webdriver, component, componentOptions) {
		this.webdriver = webdriver;
		var componentNamespace = component.split(".");
		this.componentNamespace = componentNamespace[0];
		this.componentName = componentNamespace[1];
		this.componentOptions = componentOptions;
	}
	
	async create() {
		await this.webdriver.executeScript(function(pComponentName, pComponentOptions) {
			if($("#widget-test-container").length === 0) {
				$(document.body).append($("<div>").attr("id", "widget-test-container"));
			} else {
				$("#widget-test-container").remove();
				$(document.body).append($("<div>").attr("id", "widget-test-container"));
			}
			$("#widget-test-container")[pComponentName](pComponentOptions);
		}, this.componentName, this.componentOptions);
	}
	
	async redraw() {
		await this.webdriver.executeScript(function(pComponentName, pComponentOptions) {
			$("#widget-test-container").empty();
			$("#widget-test-container")[pComponentName](pComponentOptions);
		}, this.componentName, this.componentOptions);
	}
	
	async executeMethod(methodName, args) {
		await this.webdriver.executeScript(function(pComponentName, pMethodName, pArgs) {
			$("#widget-test-container")[pComponentName].apply($("#widget-test-container"), [pMethodName].concat(pArgs));
		}, this.componentName, methodName, args);
	}
	
	async expectEventToFire(action, eventName, elementCSS, expectedData) {
		await this.webdriver.executeScript(function(pEventName) {
			window[pEventName] = false;
			$("#widget-test-container").on(pEventName, function(event, data) { window[pEventName] = data });
		}, eventName);

		await this.executeAction(action, elementCSS);
		expect(await this.webdriver.executeScript(function(pEventName) { return window[pEventName]; }, eventName)).to.deep.equal(expectedData);
		
		await this.webdriver.executeScript(function(pEventName) {
			delete window[pEventName];
			$("#widget-test-container").off(pEventName, function(event, data) { window[pEventName] = data });
		}, eventName);
	}
	
	async expectElementToHaveClass(elementCSS, pClassName) {
		var className = await this.webdriver.findElement(By.css(elementCSS)).getAttribute("class");
		expect(className.match(new RegExp(pClassName))).to.have.length(1);
	}
	
	async expectElementToHaveStyle(elementCSS, pStyle, pValue) {
		var that = this
		var expectStyle = async function(style, value) {
			var styleValue = await that.webdriver.findElement(By.css(elementCSS)).getCssValue(style);
			expect(styleValue).to.equal(value);
		}
		if(typeof pStyle === "object") {
			for(var prop in pStyle) {
				await expectStyle(prop, pStyle[prop]);
			}
		} else {
			await expectStyle(pStyle, pValue);
		}
	}
	
	async fillInElement(elementCSS, value) {
		var element = await this.webdriver.wait(until.elementIsVisible(await this.webdriver.wait(until.elementLocated(By.css(elementCSS)))), 3000)
		await element.clear();
		await element.sendKeys(value);
	}
	
	async executeAction(action, elementCSS) {
		switch(action) {
			case "click":
				await this.webdriver.findElement(By.css(elementCSS)).click();
				break;
			case "contextClick":
				let actions = this.webdriver.actions();
				await actions.contextClick(webdriver.findElement(By.css(elementCSS))).perform();
		}
	}
}

module.exports = WidgetFunctionalTestObject;