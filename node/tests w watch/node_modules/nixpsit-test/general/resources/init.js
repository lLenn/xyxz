var expect = chai.expect;
var assert = chai.assert;
var testVariables;
var mochaLogs = [];

var calls = {};
var call_responses = {};
var call_expectations = {};

mocha.setup({
    ui: "bdd",
    reporter: JSONStream
})

function JSONStream (runner) {
	var result = { passed: 0, pending: 0, failed: 0 };
	runner.on('start', function () {
		try {
			var output = JSON.stringify({ data: ["start", { "total": runner.grepTotal(runner.suite), "grep": mocha.options.grep.source }] });
			mochaLogs.push(output);
		} catch(e) {
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": "Check browser for error" }] });
			mochaLogs.push(output);
			throw e;
		}
	});
	  
	runner.on('suite', function(suite) {
		try {
			var output = JSON.stringify({ data: ["suite", { "title": suite.title, "total": suite.tests.length }] });
			mochaLogs.push(output);
		} catch(e) {
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": "Check browser for error" }] });
			mochaLogs.push(output);
			console.error(e);
		}
	});

	runner.on('pass', function (test) {
		try {
			var speed = "fast";
			if (test.duration > test.slow()) {
				speed = 'slow';
			} else if (test.duration > test.slow() / 2) {
				speed = 'medium';
			}
			result.passed++;
			var output = JSON.stringify({ data: ['pass', { "title": test.title, "duration": test.duration, "speed": speed }] });
			mochaLogs.push(output);
		} catch(e) {
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": "Check browser for error" }] });
			mochaLogs.push(output);
			console.error(e);
		}
	});

	runner.on('fail', function (test, err) {
		try {
			result.failed++;
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": err.message, "stack": err.stack, "expected": err.expected, "actual": err.actual, "prop": err.prop, "expectation": err.expectation, "options": err.options, "prevOptions": err.prevOptions, "args": err.args, "method": err.method }] });
			mochaLogs.push(output);
		} catch(e) {
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": "Check browser for error" }] });
			mochaLogs.push(output);
			console.error(e);
		}
	});

	runner.on('pending', function (test) {
		try {
			result.pending++;
			var output = JSON.stringify({ data: ["pending", { "title": test.title }] });
			mochaLogs.push(output);
		} catch(e) {
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": "Check browser for error" }] });
			mochaLogs.push(output);
			console.error(e);
		}
	});
	  
	runner.on('suite end', function (suite) {
		try {
			var output = JSON.stringify({ data: ["suite end", { "title": suite.title }] });
			mochaLogs.push(output);
		} catch(e) {
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": "Check browser for error" }] });
			mochaLogs.push(output);
			console.error(e);
		}
	});

	runner.on('end', function () {
		try {
			var output = JSON.stringify({ data: ["end", result] });
			mochaLogs.push(output);
		} catch(e) {
			var output = JSON.stringify({ data: ["fail", { "title": test.title, "err": "Check browser for error" }] });
			mochaLogs.push(output);
			console.error(e);
		}
	});
}

function getCall(notation) {
	var names = notation.split(".");
	var call = window;
	var parent;
	for(var i = 0, len = names.length; i < len; i++) {
		if(call[names[i]] === undefined) {
			call[names[i]] = function(){};
		}
		parent = call;
		call = call[names[i]];
	}
	return { parent: parent, call: call, name: names[len-1] };
}

function mockCall(notation, name) {
	var call = getCall(notation);
	calls[name] = call.parent[call.name];
	call.parent[call.name] = function() { return call_expectations[name].apply(null, arguments); };
}

function undoMock(notation, name) {
	var call = getCall(notation);
	call.parent[call.name] = calls[name];
}