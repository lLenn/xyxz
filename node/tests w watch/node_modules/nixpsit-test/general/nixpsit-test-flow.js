const process = require("process");
const readline = require("readline");
const fs = require('fs');
const path = require('path');
const NiXPSWebdriver = require("./nixpsit-test-webdriver.js");
const connection = require("./nixpsit-test-connection.js");
const config = require("./nixpsit-test-config.js");
const api = require("./nixpsit-test-api.js");
const timer = require("./nixpsit-test-timer.js");
const testing = require("./nixpsit-test-testing.js");

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});
config.setConfig(getConfigFile());

function wait(pMilliseconds) {
	return new Promise(function(pResolve, pError) {
		setTimeout(pResolve, pMilliseconds)
	});
}

function getConfigFile() {
	return JSON.parse(fs.readFileSync("./config.json", 'utf8'));
}

class NiXPSITTestflow {
	constructor(adminLogin, adminPassword) {
		this.adminLogin = adminLogin;
		this.adminPassword = adminPassword;
		
		this.prepareCallback;
		this.mainCallback;
		this.cleanCallback;
		this.testDirectory;
		this.testData;
		
		this.useConsole = false
		for(var i = 1, len = process.argv.length; i < len; i++) {
			var arg = "";
			if(process.argv[i] === "--console") {
				this.useConsole = true;
			}
		}
		
		let that = this;
		rl.on('SIGINT', async function() {
			await that._clean();
		});
		this.running = true;
	}
	
	setLoginCallback(callback) {
		testing.setLoginCallback(callback);
	}
	
	setPrepareCallback(callback) {
		this.prepareCallback = callback;
	}
	
	setMainCallback(callback) {
		this.mainCallback = callback;
	}
	
	setCleanCallback(callback) {
		this.cleanCallback = callback;
	}
	
	setTestData(data) {
		this.testData = data;
	}
	
	setTestDirectory(dir) {
		this.testDirectory = dir;
		testing.setTestDirectory(this.testDirectory);
	}
	
	setAPPDirectory(dir) {
		testing.setAPPDirectory(dir);
	}
	
	run() {
		(async function() {
			await this._prepare();
			if(config.getSetting("run_tests") === true) {
				await this._main();
				if(this.useConsole === true) {
					let that = this;
					rl.on('line', async function(line) {
						if(that.running === false) {
							if(line !== null && (line === "run" || line === "test" || line === "tests")) {
								that.running = true;
								await that._main();
							} else if(line !== null && (line === "exit" || line === "end")) {
								await that._clean();
							}
						}
					});
				} else {
					await this._clean();
				}
			} else {
				await this._clean();
			}
		}).call(this).then(function() {
			console.log("Finished tests!");
		}, function(pError) {
			console.log(pError);
		});
	}
	
	setActiveBrowser(browser) {
		console.log("Using '" + browser + "'...");
		testing.setActiveBrowser(browser);
	}
	
	async runTestsAs(login, password) {
		await this.loginAs(login, password);
		await this._runTests();
	}
	
	async loginAs(login, password) {
		console.log("Logging in as " + login + "...");
		timer.track("Login");
		console.log("Loading session...");
		await connection.connect(login, password);
		await api.loadSession(login, password);
		if(config.getSetting("run_tests") === true) {
			await testing.login(login, password);
		}
		timer.time("Login");
	}

	async _prepare() {
		console.log("Preparing environment...");
		timer.track("Preparation");
		console.log("Loading session as admin...");
		await connection.connect(this.adminLogin, this.adminPassword);
		await api.loadSession(this.adminLogin, this.adminPassword);
		if(this.prepareCallback !== undefined) {
			await this.prepareCallback.call(this);
		}
		timer.time("Preparation");
	}

	async _main() {
		try {
			config.setConfig(getConfigFile());
			console.log("Executing tests...")
			timer.track("Tests");
			this._clearCacheOfTests();
			testing.clearScriptsAndTests();
			require(this.testDirectory);
			testing.setTestData(this.testData);
			if(this.mainCallback !== undefined) {
				await this.mainCallback.call(this);
			}
			timer.time("Tests");
		} catch(e) {
			console.error(e);
		}
		this.running = false;
	}
	
	async _clean() {
		console.log("Cleaning environment...");
		timer.track("Cleaning");
		if(this.cleanCallback !== undefined) {
			await this.cleanCallback.call(this);
		}
		if(config.getSetting("run_tests") === true) {
			await testing.close();
		}
		timer.time("Cleaning");
		process.exit(0);
	}
	
	_clearCacheOfTests() {
		for(let prop in require.cache) {
			if(prop.indexOf(path.resolve(this.testDirectory)) !== -1) {
				delete require.cache[prop];
			}
		}
	}

	async _runTests() {
		try {
			if(config.getSetting("test_type").indexOf("Unit") !== -1) {
				await testing.runMochaTests(__dirname + "/resources/main.html", [
					__dirname + "/resources/init.js",
					__dirname + "/nixpsit-test-WidgetUnitTestObject.js",
					__dirname + "/UnitTest/nixpsit-unit-MethodRules.js",
					__dirname + "/UnitTest/nixpsit-unit-ObjectDefinition.js",
					__dirname + "/UnitTest/nixpsit-unit-PropertyDefinition.js",
					__dirname + "/UnitTest/nixpsit-unit-FunctionDefinition.js",
					__dirname + "/UnitTest/nixpsit-unit-Rule.js",
					__dirname + "/UnitTest/nixpsit-unit-RuleProperty.js",
					__dirname + "/UnitTest/nixpsit-unit-TestObject.js",
					__dirname + "/UnitTest/nixpsit-unit-Widget.js",
					__dirname + "/UnitTest/filters/nixpsit-unit-Filter.js",
					__dirname + "/UnitTest/filters/nixpsit-unit-NumberFilter.js",
					__dirname + "/UnitTest/filters/nixpsit-unit-DateFilter.js",
					__dirname + "/UnitTest/expectations/nixpsit-unit-RuleExpectation.js",
					__dirname + "/UnitTest/expectations/nixpsit-unit-ObjectRuleExpectation.js",
					__dirname + "/UnitTest/expectations/nixpsit-unit-JQueryRuleExpectation.js",
					__dirname + "/UnitTest/types/dictionaries/nixpsit-unit-TypeDictionary.js",
					__dirname + "/UnitTest/types/dictionaries/nixpsit-unit-StringDictionary.js",
					__dirname + "/UnitTest/types/nixpsit-unit-TypeDefinition.js",
					__dirname + "/UnitTest/types/nixpsit-unit-EndOfType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-ArrayType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-BooleanType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-DateType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-NumberType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-ObjectType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-ParentType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-StringType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-TestType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-ValuesType.js",
					__dirname + "/UnitTest/types/nixpsit-unit-LinkedType.js"
				], config.getSetting("grep"));
			}
			if(config.getSetting("test_type").indexOf("Functional") !== -1) {
				await testing.runFunctionalTests(__dirname + "/resources/functional_template.html", __dirname + "/resources/initFunctional.js", config.getSetting("grep"));
			}
		} catch(e) {
			console.error(e);
		}
		this.running = false;
	}
}

module.exports = NiXPSITTestflow;