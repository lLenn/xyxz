if(typeof require !== "undefined") {
	var TypeDefinition = require("./nixpsit-unit-TypeDefinition.js");
	var EndOfType = require("./nixpsit-unit-EndOfType.js");
	var TestObject = require("../nixpsit-unit-TestObject.js");
}

(function() {
	ArrayType = function(pRequired, pEmpty, pObjectDefinition, pLength) {
		this.typeDefinition(pRequired);
		
		this.empty = pEmpty;
		this.objectDefinition = pObjectDefinition;
		this.length = pLength;

		this.currentArray;
	}
	
	ArrayType.prototype = Object.assign({}, TypeDefinition.prototype, {
		constructor: ArrayType,
		typeDefinition: TypeDefinition,
		
		getValue: function(pPointer, pTestObject) {
			if(this.objectDefinition !== undefined) {
				if(TestObject.MAX_DEPTH_TEST_OBJECT > pTestObject.depth) {
					var depth = pTestObject.depth;
					if(JSON.stringify(this.objectDefinition) === JSON.stringify(pTestObject.definition)) {
						depth++;
					}
					var obj = new TestObject(this.objectDefinition, pTestObject.allCombinations, depth);
					if(this.length !== undefined) {
						if(pPointer === 0) {
							var val = [];
							for(var i = 0; i < this.length; i++) {
								val.push(obj.createRandomObject());
							}
							return val;
						} else {
							return new EndOfType();
						}
					} else {
						switch(pPointer) {
							case 0: this.currentArray = [obj.createRandomObject(), obj.createRandomObject()]; break;
							case 1: (Array.isArray(this.currentArray) === false)?this.currentArray = [obj.createRandomObject(), obj.createRandomObject(), obj.createRandomObject()]:this.currentArray.unshift(obj.createRandomObject()); break;
							case 2: (Array.isArray(this.currentArray) === false)?this.currentArray = [obj.createRandomObject()]:this.currentArray.slice(2); break;
							case 3: if(this.empty === true) { this.currentArray = []; break; } else { this.pointer++; };
							case 4: this.currentArray = [obj.createRandomObject(), obj.createRandomObject()]; break;
							default: this.currentArray = new EndOfType();
						}
						return this.currentArray;
					}
				} else {
					return new EndOfType();
				}
			} else {
				switch(pPointer) {
					case 3: return ["20", "10"];
					case 0: return ["30", "20", "10"];
					case 1: return ["10"];
					case 2: if(this.empty === true) { return []; } else { this.pointer++; };
					case 3: return ["20", "10"];
					default: return new EndOfType();
				}
			}
		}
	});
})()

if(typeof module !== "undefined") {
    module.exports = ArrayType;
}