const config = require("./nixpsit-test-config.js");
const api = require("./nixpsit-test-api.js");
const http = require("http");
const fs = require("fs");
const querystring = require("querystring");
const request = require("request");

let uIDs = [];
let letters = "abcdefghijklmnopqrstuvwxyz";

function randomLetter() {
    return letters[Math.floor(Math.random() * 25)];
}

class Utilities {
	
	constructor() {
		
	}
	
	async uploadFile(filePath, cloudflowPath) {     
        const assets = await api.call("asset.list", { query: ['cloudflow.part', 'equal to', cloudflowPath], fields: [ '_id' ]});
        if(assets.results.length === 0) {   
			return new Promise(function(resolve, reject) {
				try {
					let postData = { file: "" };
					request.post({
						url: `${config.getSetting("authority")}/portal.cgi?asset=upload_file&session=${api.getSessionID()}&url=${encodeURIComponent(cloudflowPath)}&create_folders=true`,
						formData: {
							file: fs.createReadStream(filePath)
						}
					}, function(value, response) {
		                resolve(response);
		            });
				} catch(error) {
					reject(error);
				}
		    });		
		} else {
			return new Promise(function(resolve, reject) { resolve({ statusCode: 200 }); });	
		}
	}
	
	async deleteFile(cloudflowPath) {
        await api.call("file.delete_file", { file: cloudflowPath });
	}
	
	generateGUID() {
		let guid;
		do {
			 guid = randomLetter() + randomLetter() + '-' + randomLetter() + '-' + randomLetter() + '-' + randomLetter() + '-' + randomLetter() + randomLetter() + randomLetter();
		}
		while(uIDs.indexOf(guid) !== -1);
		uIDs.push(guid);
		return guid;
	}
}

module.exports = new Utilities();