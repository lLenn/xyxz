<?php
namespace application\weblcms\course_type;

use common\libraries\Translation;
use common\libraries\Utilities;
use common\libraries\NewObjectTableSupport;
use common\libraries\BreadcrumbTrail;
use common\libraries\ActionBarRenderer;
use common\libraries\ToolbarItem;
use common\libraries\Theme;

/**
 * This class describes a browser for the course types
 *
 * @package \application\weblcms\course_type
 *
 * @author Yannick & Tristan
 * @author Sven Vanpoucke - Hogeschool Gent - Refactoring
 */
class CourseTypeManagerBrowseComponent extends CourseTypeManager implements NewObjectTableSupport
{
    /**
     * Keeps track of the action bar
     *
     * @var \common\libraries\ActionBarRenderer
     */
    private $action_bar;

    /**
     * **************************************************************************************************************
     * Inherited Functionality *
     * **************************************************************************************************************
     */

    /**
     * Runs this component and displays its output.
     */
    public function run()
    {
        $html = $this->get_html();

        $this->display_header();
        echo $html;
        $this->display_footer();
    }

    /**
     * Breadcrumbs are built semi automatically with the given application,
     * subapplication, component...
     * Use this function to add other breadcrumbs between the application /
     * subapplication and the current component
     *
     * @param $breadcrumbtrail \common\libraries\BreadcrumbTrail
     */
    public function add_additional_breadcrumbs(BreadcrumbTrail $breadcrumbtrail)
    {
        $breadcrumbtrail->add_help('weblcms_course_type_browser');
    }

    /**
     * Returns additional parameters that need to be registered and are used in
     * every url generated by this component
     *
     * @return String[]
     */
    public function get_additional_parameters()
    {
        return array();
    }

    /**
     * **************************************************************************************************************
     * Helper Functionality *
     * **************************************************************************************************************
     */

    /**
     * Returns the html for this component
     *
     * @return String
     */
    private function get_html()
    {
        $html = array();

        $this->action_bar = $this->get_action_bar();

        $html[] = '<div style="clear: both;"></div>';
        $html[] = $this->action_bar->as_html() . '<br />';

        $course_type_table = new CourseTypeTable($this);
        $html[] = $course_type_table->as_html();

        $html[] = '<div style="clear: both;"></div>';
        $html[] = '</div>';
        $html[] = '</div>';
        return implode($html, "\n");
    }

    /**
     * Creates and returns the action bar
     *
     * @return \common\libraries\ActionBarRenderer
     */
    public function get_action_bar()
    {
        $action_bar = new ActionBarRenderer(ActionBarRenderer :: TYPE_HORIZONTAL);

        $action_bar->set_search_url($this->get_url());

        $action_bar->add_common_action(
            new ToolbarItem(
                Translation :: get('Add', null, Utilities :: COMMON_LIBRARIES),
                Theme :: get_common_image_path() . 'action_add.png', $this->get_create_course_type_url(),
                ToolbarItem :: DISPLAY_ICON_AND_LABEL
            )
        );

        $action_bar->add_common_action(
            new ToolbarItem(
                Translation :: get('ShowAll', null, Utilities :: COMMON_LIBRARIES),
                Theme :: get_common_image_path() . 'action_browser.png', $this->get_url(),
                ToolbarItem :: DISPLAY_ICON_AND_LABEL
            )
        );

        return $action_bar;
    }

    /**
     * Returns the condition for the table
     *
     * @return \common\libraries\Condition
     */
    public function get_object_table_condition($object_table_class_name)
    {
        return $this->action_bar->get_conditions(
            array(
                CourseType :: PROPERTY_TITLE,
                CourseType :: PROPERTY_DESCRIPTION
            )
        );
    }
}
